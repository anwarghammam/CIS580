services:
  api:
    deploy:
      placement:
        constraints:
        - node.hostname == worker1
    environment:
      DATABASE_URL: mongodb://admin:admin@mongodb:27017
    image: iselabdearborn/docker-grocery-api
    ports:
    - 3000:3000
  creator:
    depends_on:
    - api
    deploy:
      placement:
        constraints:
        - node.hostname == worker1
    environment:
      API_URL: http://api:3000/api
    image: iselabdearborn/docker-grocery-creator
  grafana:
    deploy:
      placement:
        constraints:
        - node.hostname == manager
    environment:
    - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
    - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    - GF_USERS_ALLOW_SIGN_UP=false
    image: stefanprodan/swarmprom-grafana:5.3.4
    networks:
    - net
    ports:
    - 3000:3000
    volumes:
    - grafana:/var/lib/grafana
  mongodbexpress:
    deploy:
      placement:
        constraints:
        - node.hostname == manager
    environment:
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_SERVER: mongodb
    image: mongo-express:0.54
    ports:
    - 8000:8081
  nginx:
    deploy:
      placement:
        constraints:
        - node.hostname == worker2
    image: nginx
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}
    configs:
    - source: node_rules
      target: /etc/prometheus/swarm_node.rules.yml
    - source: task_rules
      target: /etc/prometheus/swarm_task.rules.yml
    deploy:
      placement:
        constraints:
        - node.hostname == manager
    image: stefanprodan/swarmprom-prometheus:v2.5.0
    networks:
    - net
    ports:
    - 9090:9090
    volumes:
    - prometheus:/prometheus
  rabbitmq:
    deploy:
      placement:
        constraints:
        - node.hostname == manager
    image: rabbitmq
  redis:
    deploy:
      placement:
        constraints:
        - node.hostname == manager
    image: redis
  visualizer:
    deploy:
      placement:
        constraints:
        - node.hostname == manager
    image: dockersamples/visualizer:latest
    ports:
    - 8070:8080
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  web:
    depends_on:
    - api
    deploy:
      placement:
        constraints:
        - node.hostname == worker2
    environment:
      API_URL: http://api:3000/api
    image: iselabdearborn/docker-grocery-web
    ports:
    - 8081:3000
version: '3.8'
volumes:
  data-volume:
    driver: local
